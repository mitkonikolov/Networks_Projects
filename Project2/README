High-level Approach
We followed the "Implementing Your Bridge" section of the assignment description, it gave us a lot of insights and also a guide of where to start.

We started by drawing out the networks of each tests on paper, trying to figure out what is happening and all the different required fields in order to be a valid config file. We started with simple 1 and figured out why it was albe to pass even without any bridge implementation.

Once we have a clear understanding of the python starting code and the first few tests, we started coding some implementations and created the bridge and message class, along with their appropriate functionalities. We tried to seperate the functionalities as much as possible.

We then continue to try and form the spanning tree by sending and parsing BPDUs. We tried to think from each bridge's perspective and decide when to open or deactivate a port. It was almost working until we implemented the port history array to make sure that we are closing all the correct ports.

Once the spanning tree is ready, we started to work on forwarding packets, the forwarding table. We also updated the enabled ports when the BPDUs expired. Lastly, in order to pass some of the advanced tests, we have to add the logic to detect when a bridge gets disconnected from the network, we have to recalculate the spanning tree.



Challenged Faced
We have faced a couple of challenges during this project, spent a lot of time debugging by drawing out the test cases on a whiteboard or reading through the data packets being dropped in our log. The process was slow but they were effective.

Challenges such as not closing the correct ports was resolved by drawing it on a whiteboard, manually figuring out where the root ports are and which are the activated ports. Additionally, sometimes we're seeing tests passing with a slight chance for the packets to be dropped. We resolved this issue by comparing the output for the success case and the failure case, then the issue became pretty obvious.




Overview of Testing
Most of the issues we see are about the correctness of our program, such as having cycles or having duplicated packets. Going over the code and talking it out loud to each other was helpful, what we also find helpful was to write all our debug messages into a file, it allowed us search through the entire log and be able to locate our issue quickly.

Additionally, we also wrote a scipt that will run the test multiple times to double check that we have a 100% packet delivery rate and zero duplicated packets. What we noticed is that since the "login" machine have the most users, it will have a much higher chance of having duplicate packets when running our test on that machine. In order to check if our program was correct and was not the machine's issue, we run our script on both "login" and "top", which will automate the test for about 50 times and we were able to compare the results that way.
