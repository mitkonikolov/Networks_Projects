#!/usr/bin/python -u    
# The -u makes output unbuffered, so it will show up immediately
import sys
import socket
import select

# pads the name with null bytes at the end
def pad(name):
        result = '\0' + name
        while len(result) < 108:
                result += '\0'
        return result

def broadcast(id, path, sockets):
        bpdu = str(id) + ";" + str(path)
        for s in sockets:
                s.send(bpdu)

class BPDU(object):
        root_id = -1
        path_cost = -1  

        def __init__(self, data):
                try:
                        d = data.split(';')
                        self.root_id = d[0]
                        self.path_cost = d[1]
                except Exception:
                        raise Exception('Invalid BPDU')
        @staticmethod
        def isBpdu(data):
                return len(packet.split(";")) == 2

if __name__ == "__main__":
        # bridge ID
        id = sys.argv[1]
        # LANs the bridge is connecting to
        LAN = sys.argv[2:]
        sockets = []

        # creates sockets and connects to them
        for x in range(len(LAN)):
                s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
                s.connect(pad(LAN[x]))
                sockets.append(s)

        #initialize root_id and path_cost
        root_id = id
        path_cost = 0
        # root_port is not necessary in the beginning
        root_port = -1

        broadcast(str(root_id), path_cost, sockets)

        #Main loop
        while True:
                # Calls select with all the sockets; change the timeout value (1)
                ready, ignore, ignore2 = select.select(sockets, [], [], 1)

                # Reads from each fo the ready sockets
                for x in ready:
                        data = x.recv(1500)
                        if(BPDU.isBpdu(data)):
                                bpdu = None
                                try: 
                                        foreignBPDU = BPDU(data)
                                except Exception: 
                                        continue
                                if foreignBPDU.root_id < root_id:
                                        root_id = foreignBPDU.root_id
                                        path_cost = foreignBPDU.path_cost
                                        root_port = x.gethostname()
                                        broadcast(root_id, path_cost, sockets)
                                elif foreignBPDU.root_id == root_id:
                                        if foreignBPDU.path_cost < path_cost:
                                                root_port = x.gethostname()
                                                path_cost = foreignBPDU.path_cost
                                                broadcast(root_id, path_cost, sockets)
# TODO
# 1. Confirm that tree building algo works for two/three bridges
# 2. Decide which ports are active
# 3. Build a forwarding table
# 4. Forward packets



