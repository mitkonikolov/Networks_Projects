#!/usr/bin/python -u    
# The -u makes output unbuffered, so it will show up immediately
import sys
import socket
import select

# pads the name with null bytes at the end
def pad(name):
        result = '\0' + name
        while len(result) < 108:
                result += '\0'
        return result

def broadcast(id, path):
        bpdu = str(id) + ";" + str(path)
        for s in sockets:
                s.send(bpdu)

def isBpdu(packet):
        return len(packet.split(";"))==2

def get(packet, n):
        return packet.split(";")[n]



if __name__ == "__main__":
        id = sys.argv[1]
        LAN = sys.argv[2:]
        sockets = []

        # creates sockets and connects to them
        for x in range(len(LAN)):
                s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
                s.connect(pad(LAN[x]))
                sockets.append(s)

        #initialize root_id and path
        root_id = id
        path = 0
        # root_port is not necessary in the beginning
        root_port = -1

        broadcast(str(root_id), path)



        #       print "Bridge " + id + " starting up\n"

        #Main loop
        while True:
                # Calls select with all the sockets; change the timeout value (1)
                ready, ignore, ignore2 = select.select(sockets, [], [], 1)

                # Reads from each fo the ready sockets
                for x in ready:
                        data = x.recv(1500)
                        if(isBpdu(data)):
                                idForeign = get(data, 0)
                                if idForeign < root_id:
                                        root_id = idForeign
                                        path = get(data, 1)
                                        root_port = x.gethostname()
                                        broadcast(root_id, path)
                                elif idForeign == root_id:
                                        if get(data, 1) < path:
                                                root_port = x.gethostname()
                                                path = get(data, 1)
                                                broadcast(root_id, path)
# TODO
# 1. Confirm that tree building algo works for two/three bridges
# 2. Decide which ports are active
# 3. Build a forwarding table
# 4. Forward packets



