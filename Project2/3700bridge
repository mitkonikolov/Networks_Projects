#!/usr/bin/python -u    
# The -u makes output unbuffered, so it will show up immediately
import sys
import socket
import select
import threading
import time
import json
import random
import string




class Bridge(object):
    id = -1
    LAN = None
    sockets = []
    root_id = -1 # the current root
    cost = 0
    # file number of the port associated with the root
    root_port = -1 # the port to use to get to root
    message = None
    # unique LANs we are connected to and ports through which we connect to them
    uniqueLANs = {}
    # file numbers for the active ports
    activePorts = []
    inactivePorts = []
    routing_table = {}
    # a dictionary of ports; each port maps to a list of (BPDU, time) tuple
    port_history = {}
    enabled_ports = []

    def __init__(self, id, LAN):
        self.id = id
        self.LAN = LAN
	self.root_id = id
        print("Bridge "+ str(self.id) +" starting up")
	open("ports.txt", "w+").close()

    # pads the name with null bytes at the end
    def pad(self, name):
        result = '\0' + name
        while len(result) < 108:
            result += '\0'
        return result

    def connect_to_sockets(self):
        for x in range(len(self.LAN)):
            s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
	    #name = self.pad(self.LAN[x])
	    #f = open("ports.txt", "a") 
	    #f.write("{}\n".format(name))           
	    s.connect(self.pad(self.LAN[x]))
	    #f.write("{}\n\n".format(s.fileno()))
            self.sockets.append(s)
	    self.activePorts.append(s)
	    self.enabled_ports.append(s)
	    self.port_history[s] = []
	    #f.close()
        self.message = Message(self.sockets)

    def start(self):
        # TODO print out the messages that the assignment requires
        # broadcast first message to start the process of building a spanning
        #  tree
	
	f = open("out.txt", "w+")
	f.close()

        self.broadcast_bpdu()
	last_mess_time = time.time() * 100
	#print(last_mess_time)
	#print(time.time() * 100)
	#while ((time.time() * 100) - last_mess_time) < 20:
	#    self.broadcast_bpdu()

        while True:
	    curr_time = time.time() * 100
	    if (curr_time-last_mess_time) > 50:
		self.broadcast_bpdu()
		last_mess_time = time.time() * 100
	    #if (curr_time - last_mess_time) > 50:
	    #time.sleep(0.5)
	    #	self.broadcast_bpdu()
	    
            # Calls select with all the sockets; change the timeout value (1)
            ready, ignore1, ignore2 = select.select(self.sockets, [], [], 0.5)
            # Reads from each fo the ready sockets
            for socket in ready:
                data = socket.recv(1500)
		print(data)

	        f = open("out.txt", "a")
		f.write(data)
		f.write("\n")
		f.close()
                if self.message.is_BPDU(data):
		    # there have been no BPDUs on this socket/port
		    if self.port_history[socket] is None:
			self.port_history[socket] = []
		    time_now = time.time() * 100
		    print(time_now)
		    tup1 = (data, time_now)
		    self.port_history[socket].append(tup1)
		    if self.is_from_me(data):
			peer_name = socket.getpeername()
			file_no = socket.fileno()
			if socket not in self.inactivePorts and peer_name in self.uniqueLANs and file_no != self.uniqueLANs[peer_name]:
			    self.activePorts.remove(socket)
			    if socket in self.enabled_ports:
				self.enabled_ports.remove(socket)
			    self.inactivePorts.append(socket)
			    f = open("ports.txt", "a")
			    f.write("inactive: {}\n".format(socket.fileno()))
			    f.close()
			elif peer_name not in self.uniqueLANs:
			    self.uniqueLANs[peer_name] = file_no
                    else:
                        try:
                            foreignBPDU = json.loads(data)
			    if int(str(foreignBPDU['message']['root']), 16) < \
                                    int(str(self.root_id), 16) or \
			       (int(str(foreignBPDU['message']['root']), 16) ==
                                     int(str(self.root_id), 16) and
                                             int(str(foreignBPDU['message']['cost']), 16) <
                                             (int(str(self.cost), 16) - 1)) or \
			       (int(str(foreignBPDU['message']['root']), 16) == int(str(self.root_id), 16) and int(str(foreignBPDU['message']['cost']), 16) == int(str(self.cost), 16) and int(str(foreignBPDU['source']), 16) < int(str(self.id), 16)):
				self.root_id = foreignBPDU['message']['root']
                                self.cost = foreignBPDU['message']['cost'] + 1
                                self.root_port = socket.fileno()
                                self.broadcast_bpdu()
				f = open("out.txt", "a")
                                f.write("New root: {}/{}".format( self.id,
                                                                self.root_id))
				f.write("\n")
				f.close()
			    else:
				 print("here")
                        except Exception as e:
                            print(e)
                            print("BPDU was malformed and is " + data)
		    self.update_enabled_ports()
		else:
		    
		    #f = open("out.txt", "a")
		    #f.write("\nActive Ports\n")
		    #f.write(str(type(socket)))
		    #for port in self.activePorts:
		#	f.write("{}\n".format(port.fileno()))
		 #   f.write(str(socket.fileno()))
		  #  f.write(data)
		    #f.close()
		    
		    # prevent reading from multiple ports
		    #if socket not in self.inactivePorts:
		    if socket in self.enabled_ports:

		    #if socket in self.activePorts:
		   # 	f.write("\n------END-------\n")
		#	f.close()
			# extract source and put in forwarding table
			data_dict = json.loads(data)
			source = data_dict['source']
			self.routing_table[source] = socket
			# extract destination and check whether we have it
			destination = data_dict['dest']
			dest_ports = []
			f = open("out.txt", "a")
			f.write("\nRouting table:\n")
			for host in self.routing_table:
			    f.write("Host: {} - Port: {}\n\n".format(host, self.routing_table[host]))
			#f.close()
			if destination in self.routing_table:
			    f.write("destionation is in routing table\n")
			    # only send if the two hosts are on different ports
			    if self.routing_table[destination] != socket:
			        dest_ports.append(self.routing_table[destination])
			else:
			    f.write("destination is not in routing table\n")
			    for x in self.activePorts:
				if x != socket:
				    dest_ports.append(x)
			self.message.send(data, dest_ports)
			f.write(str(len(dest_ports)))
			#f.write("\ndestination is {}\n".format(dest_ports[0]))
			f.close()    
				# if we have it, forward to active ports
				# if we don't, broadcast to all active ports but port_number
	    #if ((time.time() * 100) - last_mess_time) < 200: 
	#	self.broadcast_bpdu()

    def broadcast_bpdu(self):
	f = open("out.txt", "a")
	f.write("{}/{} broadcasting\n".format(self.id, self.root_id))
	f.close()
        self.message.send_message(self.id, "FFFF", "bpdu", {"root":
                                                                self.root_id, "cost":self.cost})


    def update_enabled_ports(self):
	# This is the root => all ports are enabled
	if self.root_id == self.id:
	    self.enabled_ports = self.sockets
	    return
	i = 0
	for port in self.port_history:
	    # Reason B: this is the root port
	    if port.fileno() == self.root_port:
		# it has already been added
		#self.enabled_ports.append(port)
		continue
	    bpdus = self.port_history[port]
	    latest_to_drop = 0
	    designated_bridge = True
	    if len(bpdus) == 0:
		#self.enabled_ports.append(port)
		continue
	    for i in range(len(bpdus)):
		# the message is older than/equal to 750ms
		if ((time.time()*100) - bpdus[i][1]) >= 750:
		    # drop all messages before and up to this one
		    latest_to_drop = i
		else:
		    json_obj = json.loads(bpdus[i][0])
		    # some other bridge is designated for this LAN
		    if json_obj['message']['cost'] < self.cost or int(str(json_obj['source'], 16)) < int(str(self.id), 16) or int(str(foreignBPDU['message']['root']), 16) < \
                                    int(str(self.root_id), 16):
		        designated_bridge = False
			break
	    # remove the old messages
	    #self.port_history[port] = bpdus[latest_to_drop+1:]
	    # Reason C: this is the designated bridge
	    if designated_bridge:
		#self.enabled_ports.append(port)
		continue
	    # Reason A: there are not BPDUs younger than 750ms on this port
	    if len(self.port_history[port]) == 0:
		continue
		#self.enabled_ports.append(port)
	    if port in self.enabled_ports:
	    	self.enabled_ports.remove(port)

        # TODO Consider how to identify if a bridge has stopped working and a
        # TODO socket thus becomes useless


    def is_from_me(self, bpdu):
        bpdu_dict = json.loads(bpdu)
        return bpdu_dict['source'] == self.id

    def __eq__(self, other):
        """Overrides the default implementation"""
        if isinstance(self, other.__class__):
            return self.fileno() == other.fileno()
    	return False

    def __ne__(self, other):
        """Overrides the default implementation (unnecessary in Python 3)"""
        return not self.__eq__(other)


class Message(object):
    sockets = {}
    id = 0

    def __init__(self, sockets):
        self.sockets = sockets

    def send_message(self, source, dest, type, message):
        '''Packs and sends the message that was passed'''
        if type == "bpdu": # broadcast
            m = {}
            m['source'] = source
            m['dest'] = dest
            m['type'] = type
            m['message'] = message
            m['message']['id'] = self.gen_RN()
            m = json.dumps(m).encode('utf-8')
            for s in self.sockets:
                s.send(m)

    def is_BPDU(self, json_str):
        dict_message = json.loads(json_str)
        val = dict_message['type']
        return val == "bpdu"

    def gen_RN(self):
        '''Returns a random number'''
        return random.choice('0123456789abcdef') + random.choice(
            '0123456789abcdef') + random.choice('0123456789abcdef') + \
               random.choice('0123456789abcdef')

    def set_ports(self, ports):
        self.sockets = ports

    def send(self, message, ports):
	for s in ports:
	    #m = json.dumps(message).encode('utf-8')
	    s.send(message)



if __name__ == "__main__":
    # bridge ID
    id_main = sys.argv[1]
    # LANs the bridge is connecting to
    LAN_main = sys.argv[2:]

    bridge_main = Bridge(id_main, LAN_main)
    bridge_main.connect_to_sockets()
    bridge_main.start()

'''

    # creates sockets and connects to them
    for x in range(len(LAN)):
        s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        s.connect(pad(LAN[x]))
        sockets.append(s)

    #initialize root_id and path_cost
    root_id = id
    path_cost = 0
    # root_port is not necessary in the beginning
    root_port = -1

    send_message(str(root_id), path_cost, sockets)

    #Main loop
    while True:
        # Calls select with all the sockets; change the timeout value (1)
        ready, ignore, ignore2 = select.select(sockets, [], [], 1)

        # Reads from each fo the ready sockets
        for x in ready:
            data = x.recv(1500)
            if(BPDU.isBpdu(data)):
                bpdu = None
                try:
                    foreignBPDU = BPDU(data)
                except Exception:
                    continue
                if foreignBPDU.root_id < root_id:
                    root_id = foreignBPDU.root_id
                    path_cost = foreignBPDU.path_cost
                    root_port = x.gethostname()
                    send_message(root_id, path_cost,
                                 sockets)
                elif foreignBPDU.root_id == root_id:
                    if foreignBPDU.path_cost < path_cost:
                        root_port = x.gethostname()
                        path_cost = foreignBPDU.path_cost
                        send_message(root_id,
                                     path_cost,
                                     sockets)
'''
# TODO
# 1. Confirm that tree building algo works for two/three bridges - make the
# bridge meet all requirements to the best of our ability and run the test
# script
# 2. Decide which ports are active
# 3. Build a forwarding table
# 4. Forward packets



