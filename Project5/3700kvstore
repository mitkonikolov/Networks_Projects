#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

def process_mess(msg_raw):
    if len(msg_raw) == 0:
        return

    print(msg_raw)
    msg = json.loads(msg_raw)

    # For now, ignore get() and put() from clients
    if msg['type'] in ['get', 'put']:
        mess = {"src": my_id, "dst": msg["src"], "leader": leader,
                "type": "fail", "MID": msg["MID"]}
        sock.send(json.dumps(mess))

    # if msg['type'] == 'vote':
    #     if state.voted_for is None:
    #         mess = {"src": my_id, "dst": msg['leader'], "leader": msg['leader'], 'type': 'vote'}
    #         state.voted_for = msg['leader']
    #         sock.send(json.dumps(mess))
    #         last = time.time() *1000.0
    #
    #     if msg['leader'] == my_id:
    #         state.vote_count += 1
    #         if state.vote_count > replica_ids.count()/2:
    #             state.state = "leader"

    if msg['type'] == 'heart' and msg['leader'] == leader:
        last = time.time() *1000.0


while True:
        ready = select.select([sock], [], [], 0.1)[0]

        if sock in ready:
                msg_raw = sock.recv(32768)


                if len(msg_raw) == 0: continue
                process_mess(msg_raw)
                # msg = json.loads(msg_raw)
                #
                # # For now, ignore get() and put() from clients
                # if msg['type'] in ['get', 'put']:
                #         pass
                #
                # # Handle noop messages. This may be removed from your final implementation
                # elif msg['type'] == 'noop':
                #         print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

        clock = time.time()
        if clock-last > 2:
                # Send a no-op message to a random peer every two seconds, just for fun
                # You definitely want to remove this from your implementation
                msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
                sock.send(json.dumps(msg))
                print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
                last = clock


