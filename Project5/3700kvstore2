#!/usr/bin/env python

import sys, socket, select, time, json
from random import random
from state import State

class Server:

    def __init__(self):
        # Your ID number
        self.my_id = sys.argv[1]

        # The ID numbers of all the other replicas
        self.replica_ids = sys.argv[2:]

        # Connect to the network. All messages to/from other replicas and clients will
        # occur over this socket
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        self.sock.connect(self.my_id)

        self.leader = "0000"
        self.timeout = (random() * 150) + 150
        self.last = time.time() * 1000.0
        self.state = State(self)



    def create_rpc(self, dst, type):
        # Send a no-op message to a random peer every two seconds, just for fun
        # You definitely want to remove this from your implementation
        return {"src": self.my_id, "dst": dst, "leader": self.leader, "type": type}

    def listen(self):
        while True:
            ready = select.select([self.sock], [], [], 0.1)[0]

            if self.sock in ready:
                msg_raw = self.sock.recv(32768)
                self.process_mess(msg_raw)
            clock = time.time() *1000.0
            if self.state.state == "follower" and clock - self.last > self.timeout:
                print("timedout, became candidate  " + self.my_id)
                self.become_candidate()

    def become_candidate(self):
        msg = self.state.prepare_for_application()
        self.sock.send(json.dumps(msg))
        print(json.dumps(msg))



    def process_mess(self, msg_raw):
        if len(msg_raw) == 0:
            return

        print(msg_raw)
        msg = json.loads(msg_raw)

        # For now, ignore get() and put() from clients
        if msg['type'] in ['get', 'put']:
            mess = {"src": self.my_id, "dst": msg["src"], "leader": self.leader,
                    "type": "fail", "MID": msg["MID"]}
            self.sock.send(json.dumps(mess))

        if msg['type'] == 'vote':
            if self.state.voted_for is None:
                mess = {"src": self.my_id, "dst": msg['leader'], "leader": msg['leader'], 'type': 'vote'}
                self.state.voted_for = msg['leader']
                self.sock.send(json.dumps(mess))
                self.last = time.time() *1000.0

            if msg['leader'] == self.my_id:
                self.state.vote_count += 1
                if self.state.vote_count > self.replica_ids.count()/2:
                    self.state.state = "leader"

        if msg['type'] == 'heart' and msg['leader'] == self.leader:
            self.last = time.time() *1000.0
