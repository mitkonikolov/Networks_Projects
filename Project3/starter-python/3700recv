#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#


import sys
import socket
import time
import datetime
import select
import json
from Logger import Logger

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

class Receiver(object):

    logger = Logger()

    MSG_SIZE = 1500
    TIMEOUT = 5

    # Bind to localhost and an ephemeral port
    UDP_IP = "127.0.0.1"
    UDP_PORT = 0

    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((UDP_IP, UDP_PORT))
    sock.settimeout(TIMEOUT)

    # Get port we bound to
    UDP_PORT = sock.getsockname()[1]
    logger.log("[bound] " + str(UDP_PORT))


if __name__ == "__main__":
    r = Receiver()

    # Now listen for packets
    while True:
        result = r.sock.recvfrom(r.MSG_SIZE)

        # If nothing is ready, we hit the timeout
        if result:
            (data, addr) = result

            try:
                decoded = json.loads(data)

                # If the EOF flag is set, exit
                if (decoded['eof']):
                    r.logger.log("[completed]")
                    sys.exit(0)

                # If there is data, we accept it and print it out
                if (decoded['data']):
                    # If we receive data, we assume it's in-order
                    # You will need to do much more here
                    r.logger.log("[recv data] " + str(decoded['sequence']) + " (" +
                                 str(len(decoded['data'])) + ") ACCEPTED (in-order)")
                    sys.stdout.write(decoded['data'])

                # Send back an ack to the sender
                # msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
                msg = json.dumps({"ack": decoded['sequence'],
                                  "flag": "ack"})
                msg = json.dumps({
                    "sequence": decoded["sequence"],
                    "data": "",
                    "crc32": "",
                    "ack": decoded["sequence"],
                    "eof": False,
                    "flag": "ack"
                })
                r.logger.log("ABOUT TO SEND " + msg)
                if r.sock.sendto(msg, addr) < len(msg):
                    r.logger.log("[error] unable to fully send packet")

            except (ValueError, KeyError, TypeError) as e:
                r.logger.log("[recv corrupt packet]")
                print(e)
                raise e
        else:
            r.logger.log("[error] timeout")
            sys.exit(-1)
