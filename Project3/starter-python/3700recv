#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#


import sys
import socket
import time
import datetime
import select
import json
from Logger import Logger
from Packet import Packet


class Receiver(object):
    logger = Logger()
    packet = None

    MSG_SIZE = 1500
    TIMEOUT = 5

    # Bind to localhost and an ephemeral port
    UDP_IP = "127.0.0.1"
    UDP_PORT = 0

    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((UDP_IP, UDP_PORT))
    sock.settimeout(TIMEOUT)

    # Get port we bound to
    UDP_PORT = sock.getsockname()[1]
    logger.log("[bound] " + str(UDP_PORT))


if __name__ == "__main__":
    r = Receiver()

    # Now listen for packets
    while True:
        result = r.sock.recvfrom(r.MSG_SIZE)

        # If nothing is ready, we hit the timeout
        if result:
            (data, addr) = result

            try:
                decoded = json.loads(data)

                # creating a packet object only for checking crc32
                r.packet = Packet(decoded["data"], "data", "")

                # TODO:
                # note, check sender's todo, if this fails (bad data, crc no match),
                # we continue (and keeping waiting until time out), but the sender should resend the
                # packet after 2 seconds (timeout for packetlog), currently the sender is not doing
                # that. Fix that.
                if not r.packet.is_good_crc(decoded["crc32"], decoded["data"]):
                    r.logger.log("bad crc")
                    continue

                # If the EOF flag is set, exit
                if (decoded['eof']):
                    r.logger.log("[completed]")
                    sys.exit(0)

                # If there is data, we accept it and print it out
                # TODO: change this to make sure we're printing in order
                if (decoded['data']):
                    # If we receive data, we assume it's in-order
                    # You will need to do much more here
                    r.logger.log("[recv data] " + str(decoded['sequence']) + " (" +
                                 str(len(decoded['data'])) + ") ACCEPTED (in-order)")
                    r.logger.log_data(decoded['data'])

                # Send back an ack to the sender

                # construct the ack for the data packet that we just received
                # TODO: add the correct ack_num and prev_seq_num (not sure how this works)
                r.packet = Packet("", "ack", decoded["sequence"])

                r.logger.log("ABOUT TO SEND " + r.packet.generateData())

                packet_sent_time = r.packet.send_packet(r.sock, addr)

                # currently not doing anything to packet_sent_time
                if packet_sent_time == -1:
                    r.logger.log("failed sending ack")
                    continue
                else:
                    r.logger.log("successfully sent an ack")

            except (ValueError, KeyError, TypeError) as e:
                r.logger.log("[recv corrupt packet]")
                print(e)
                raise e
        else:
            r.logger.log("[error] timeout")
            sys.exit(-1)
