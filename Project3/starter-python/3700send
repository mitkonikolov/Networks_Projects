#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#


import sys
import socket
import time
import datetime
import select
import json
from Logger import Logger
from Packet import Packet
from PacketLog import PacketLog

class Sender(object):
    logger = Logger()
    packet = None
    packet_log = PacketLog()
    prev_packet = None

    time_last_sent = 0

    MSG_SIZE = 1500
    DATA_SIZE = 1000
    SEQUENCE = 0

    def __init__(self):
        # Bind to localhost and an ephemeral port
        self.IP_PORT = sys.argv[1]
        self.UDP_IP = self.IP_PORT[0:self.IP_PORT.find(":")]
        self.UDP_PORT = int(self.IP_PORT[self.IP_PORT.find(":")+1:])
        self.dest = (self.UDP_IP, self.UDP_PORT)

        # Set up the socket
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.update_timeout()

        # the seq# of the last sent packet
        self.last_sent = 0
        # the seq# of the last acknowledged
        # self.last_ack = 0

    def retransmit(self, packet, eof = False):
        """ Retransmits the packet.
        :param packet: the packet to be retransmitted
        :return: bool
        """
        packet.send_packet(self.sock, self.dest, eof)

    def send_next_packet(self, eof = False, data = None):

        self.logger.log("inside packet sender")

        if data is None:
            data = sys.stdin.read(self.DATA_SIZE)

        if (len(data) > 0 or eof):

            self.logger.log("data is {}".format(data))

            # if we're sending the first packet
            if self.prev_packet is None:
                self.packet = Packet(data, "data", "")
            else:
                self.packet = Packet(data, "data", "", self.prev_packet.get_seq_num())

            # returns the time sent of the packet if success, -1 otherwise
            packet_sent_time = self.packet.send_packet(self.sock, self.dest, eof)

            # if failed sending the packet
            if packet_sent_time == -1:
                self.retransmit(self.packet)
                return
            else:
                # once successfully sent, we add packet to log and saves its sent_time
                self.packet_log.add_to_log(self.packet, packet_sent_time)
                self.prev_packet = self.packet

            return True
        else:
            # there is no more data to be sent
            return False

    def update_timeout(self):
        """Updates timeout to its most recent value as stored in the PacketLog.
        
        :return: None
        """
        self.sock.settimeout(self.packet_log.get_timeout())


if __name__ == "__main__":
    s = Sender()
    # Send first packet
    s.send_next_packet()

    # Now read in data, send packets
    while True:
        s.logger.log("ABOUT TO SLEEP")

        if s.packet_log.get_sws() > 0:
            if s.send_next_packet():
                s.packet_log.update_sws(-1)
            else:
                break
        else:
            result = s.sock.recvfrom(s.MSG_SIZE)

            if result:

                (data, addr) = result
                receival_time = time.time()

                ack = s.packet.check_ack(data)

                if ack:
                    dropped_packet = s.packet_log.update_unacked_packets(ack, receival_time)
                    # a packet has been dropped
                    if dropped_packet is not None:
                        s.retransmit(dropped_packet)
                    # packets were sent successfully and timeout needs to be
                    # updated based on latest sampleRTT
                    else:
                        s.update_timeout()

            else:
                # timeout has occurred => packets are retransmitted and
                # timeout is being updated
                for packet in s.packet_log.retransmit_table():
                    s.retransmit(packet)
                s.update_timeout()


    s.send_next_packet(True, "")
    sys.exit(0)