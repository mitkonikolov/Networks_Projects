#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#


import sys
import socket
import time
import datetime
import select
import json

time_last_sent = 0
curr_mess = ""

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

open("log", "w+").close()


# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " +
                   string + "\n")
    sys.stderr.flush()

def send_next_packet(resending):
    global curr_mess

    if not resending:
        data = sys.stdin.read(DATA_SIZE)
        curr_mess = data
    else:
        data = curr_mess

    global SEQUENCE


    if (len(data) > 0):
        log("data is {}".format(data))
        msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
        SEQUENCE += len(data)

        if sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            time_last_sent = time.time()
            log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        return True
    else:
        return False

# Send first packet
send_next_packet(False)


def p(mess):
    f = open("log", "a")
    f.write("{}\n".format(mess))
    f.close()

# Now read in data, send packets
while True:
    log("ABOUT TO SLEEP")
    p("before the timeout")
    try:
        read, write, xlist = select.select([sock], [],[], TIMEOUT)
    except:
        p("caught exception")
    sys.stderr.flush()
    p("after the timeout")

    print("here")
    #result = sock.recvfrom(MSG_SIZE)
    if len(read) > 0:
        result = read[0].recvfrom(MSG_SIZE)
        (data, addr) = result
        try:
            decoded = json.loads(data)

            # If there is an ack, send next packet
            if decoded['ack'] == SEQUENCE:
                log("[recv ack] " + str(SEQUENCE))

                # Try to send next packet; break if no more data
                if (not send_next_packet(False)):
                    break
        except (ValueError, KeyError, TypeError):
            log("[recv corrupt packet]")
    else:
        p("timed out")
        send_next_packet(True)


sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
p("exiting")
# sys.exit(0)
